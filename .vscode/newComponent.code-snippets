{
	// Place your components 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
"创建一个新组件": {
  "prefix": "newComponent",
  "body": [
    "import overload from \"@jyostudio/overload\";",
    "import Component from \"./component.js\";",
    "",
    "const STYLES = /* css */``;",
    "",
    "const HTML = /* html */``;",
    "",
    "/**",
    " * $1",
    " * @class",
    " * @extends {Component}",
    " */",
    "export default class $2 extends Component {",
    "    /**",
    "     * 观察属性",
    "     * @returns {Array<String>}",
    "     */",
    "    static get observedAttributes() {",
    "        return [...super.observedAttributes, \"属性\"];",
    "    }",
    "",
    "    constructor() {",
    "        super();",
    "",
    "        Object.defineProperties(this, {",
    "            属性: {",
    "                get: () => this.hasAttribute(\"属性\"),",
    "                set: overload()",
    "                    .add([String], value => {",
    "                        this.lock(\"属性\", () => {",
    "                            if (value) this.setAttribute(\"属性\", \"\");",
    "                            else this.removeAttribute(\"属性\");",
    "                        });",
    "                    })",
    "                    .any(() => this.属性 = false)",
    "            }",
    "        });",
    "    }",
    "",
    "    /**",
    "     * 绑定事件",
    "     */",
    "    #initEvents() {",
    "        const signal = this.abortController.signal;",
    "",
    "        // 绑定事件监听器，使用 AbortController 来管理事件的取消",
    "        // 请根据需要替换下面的事件名称和处理函数",
    "        this.addEventListener(\"eventName\", () => {",
    "",
    "        }, { signal });",
    "    }",
    "",
    "    /**",
    "     * 元素被添加到 DOM 树中时调用",
    "     */",
    "    connectedCallback() {",
    "        super.connectedCallback?.();",
    "",
    "        // 在这里进行初始化和设置",
    "",
    "        this.#initEvents();",
    "    }",
    "",
    "    /**",
    "     * 元素从 DOM 中移除时调用",
    "     */",
    "    disconnectedCallback() {",
    "        // 在这里清理事件监听器和其他资源",
    "",
    "        super.disconnectedCallback?.();",
    "    }",
    "",
    "    static {",
    "        this.registerComponent({",
    "            html: HTML,",
    "            css: STYLES",
    "        });",
    "    }",
    "}"
  ],
  "description": "创建一个新组件"
}
}